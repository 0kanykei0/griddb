/*
	Copyright (c) 2017 TOSHIBA Digital Solutions Corporation

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU Affero General Public License as
	published by the Free Software Foundation, either version 3 of the
	License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Affero General Public License for more details.

	You should have received a copy of the GNU Affero General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#include "sql_internal_parser.h"
/**
 * @file   lempar.cpp
 * @brief  C++ Driver template for the LEMON parser generator.
 *         Just ported into C++ style.
 *
 */
/* The code below are written into .cpp file */

namespace lemon_SQLParser {
const SQLParser_YYACTIONTYPE SQLParser::yy_action[] = {
 /*     0 */   295,  433,   61,  605,  605,  605,  121,  605,  605,  605,
 /*    10 */   605,   45,  450,  620,  510,  614,  323,  587,  605,  605,
 /*    20 */   621,   89,  285,   83,   82,  587,  318,  317,  609,  609,
 /*    30 */   169,  383,  405,  485,  365,  585,  295,   83,   82,  564,
 /*    40 */   600,  543,  395,  394,  311,  475,  310,  309,  576,  576,
 /*    50 */   412,  406,  224,  587,   96,   23,  562,   89,  601,   83,
 /*    60 */    82,  587,  318,  317,  372,  558,  184,  373,  175,  501,
 /*    70 */   371,  552,  607,    5,  557,   83,   82,  164,  484,   83,
 /*    80 */    82,  185,  552,  262,  576,  576,  107,  512,  517,   95,
 /*    90 */   130,   98,   75,  569,  568,  571,  570,   88,   92,   90,
 /*   100 */    93,   91,  533,   87,   86,   85,   84,   81,   80,   79,
 /*   110 */    78,  522,   92,   90,   93,   91,   76,   87,   86,   85,
 /*   120 */    84,   81,   80,   79,   78,   95,  299,   98,   75,  569,
 /*   130 */   568,  571,  570,   88,   92,   90,   93,   91,  376,   87,
 /*   140 */    86,   85,   84,   81,   80,   79,   78,  295,  217,  413,
 /*   150 */   566,  565,  602,  262,  215,   87,   86,   85,   84,   81,
 /*   160 */    80,   79,   78,   81,   80,   79,   78,  167,   89,  603,
 /*   170 */    83,   82,  533,  281,  413,  566,  565,  600,   81,   80,
 /*   180 */    79,   78,  588,  295,   83,   82,  602,  412,  556,  155,
 /*   190 */   588,  413,  566,  565,  555,  576,  576,  458,  159,  187,
 /*   200 */   671,  138,  138,  603,   89,  139,   83,   82,  552,  400,
 /*   210 */   399,  314,  457,  313,  312,  294,  413,  566,  565,  552,
 /*   220 */   400,  399,  314,  375,  313,  312,  294,   77,   74,  414,
 /*   230 */   453,  576,  576,   77,   74,  414,   95,  321,   98,   75,
 /*   240 */   569,  568,  571,  570,   88,   92,   90,   93,   91,  445,
 /*   250 */    87,   86,   85,   84,   81,   80,   79,   78,  574,   92,
 /*   260 */    90,   93,   91,  348,   87,   86,   85,   84,   81,   80,
 /*   270 */    79,   78,   95,  612,   98,   75,  569,  568,  571,  570,
 /*   280 */    88,   92,   90,   93,   91,  213,   87,   86,   85,   84,
 /*   290 */    81,   80,   79,   78,  295,  274,  413,  566,  565,  433,
 /*   300 */   586,  575,  575,  153,  383,  282,  408,  610,  586,   28,
 /*   310 */   494,  433,  168,  153,   67,   89,   65,   83,   82,  433,
 /*   320 */   504,   15,  600,  198,  196,  172,  191,  234,  170,   45,
 /*   330 */   295,  604,  412,  499,  498,  600,  276,  549,  600,  433,
 /*   340 */   181,  398,  576,  576,  442,  412,  573,  572,  412,   42,
 /*   350 */   381,   89,  524,   83,   82,  262,  601,  694,  384,  108,
 /*   360 */   512,  517,  306,  433,  193,   77,   74,  414,  601,  406,
 /*   370 */   624,  622,  324,   45,  533,  491,  601,  403,  576,  576,
 /*   380 */    77,   74,  414,   95,  554,   98,   75,  569,  568,  571,
 /*   390 */   570,   88,   92,   90,   93,   91,  601,   87,   86,   85,
 /*   400 */    84,   81,   80,   79,   78,  233,  609,  433,  547,  153,
 /*   410 */   232,  240,  397,  315,  264,  202,  494,   45,  231,   95,
 /*   420 */   601,   98,   75,  569,  568,  571,  570,   88,   92,   90,
 /*   430 */    93,   91,  383,   87,   86,   85,   84,   81,   80,   79,
 /*   440 */    78,  509,  545,  540,  295,    3,  396,  393,  433,   72,
 /*   450 */   409,  387,  251,  511,  597,   66,  433,  401,   45,  433,
 /*   460 */   137,  165,  187,  595,  601,   89,   45,   83,   82,   45,
 /*   470 */   266,  594,   69,   70,  320,  120,  561,  370,  338,  424,
 /*   480 */   295,   68,  431,  907,  136,  451,    2,  421,  518,  517,
 /*   490 */   418,   63,  576,  576,  531,  334,  180,  347,  406,  259,
 /*   500 */   345,   89,  173,   83,   82,  601,  406,  516,  157,  406,
 /*   510 */   433,  433,  600,  601,  194,  515,  601,  426,  423,  420,
 /*   520 */    45,   47,  412,  583,  582,  497,  316,  441,  576,  576,
 /*   530 */   244,  593,  592,   95,  417,   98,   75,  569,  568,  571,
 /*   540 */   570,   88,   92,   90,   93,   91,  439,   87,   86,   85,
 /*   550 */    84,   81,   80,   79,   78,  538,  523,  227,  608,  392,
 /*   560 */   377,   71,  244,  583,  582,  590,  429,  601,  601,   95,
 /*   570 */   322,   98,   75,  569,  568,  571,  570,   88,   92,   90,
 /*   580 */    93,   91,  171,   87,   86,   85,   84,   81,   80,   79,
 /*   590 */    78,  468,  600,  463,  295,    3,   13,  536,  455,   72,
 /*   600 */   409,  391,  412,  259,  597,  591,  589,  529,   20,  462,
 /*   610 */   461,  343,  189,  595,  341,   89,  433,   83,   82,  433,
 /*   620 */   224,  594,   69,   70,  320,  609,   45,  558,   51,   49,
 /*   630 */   295,  224,  431,  437,  427,  292,  557,  181,  606,  433,
 /*   640 */   465,  156,  576,  576,  319,  319,  481,  415,  433,   25,
 /*   650 */    99,   89,  433,   83,   82,  433,   94,  179,   46,  305,
 /*   660 */   433,  433,   48,   58,  291,   31,  406,  426,  423,  420,
 /*   670 */   109,  112,  308,  601,  319,  333,  601,  326,  576,  576,
 /*   680 */   529,  593,  592,   95,  417,   98,   75,  569,  568,  571,
 /*   690 */   570,   88,   92,   90,   93,   91,  601,   87,   86,   85,
 /*   700 */    84,   81,   80,   79,   78,  601,  290,  268,  465,  601,
 /*   710 */   433,   71,  601,  623,    2,  590,  319,  601,  601,   95,
 /*   720 */   111,   98,   75,  569,  568,  571,  570,   88,   92,   90,
 /*   730 */    93,   91,  369,   87,   86,   85,   84,   81,   80,   79,
 /*   740 */    78,  295,    3,  466,  176,  300,   62,  409,  224,  433,
 /*   750 */   611,  597,  224,  278,  609,  591,  589,  585,   20,  110,
 /*   760 */   595,  446,   89,  433,   83,   82,  433,  601,  594,   69,
 /*   770 */    70,  320,  267,   45,  177,  274,  106,  295,  192,  431,
 /*   780 */   611,  611,  609,  622,  324,  335,  408,  464,  265,  576,
 /*   790 */   576,  277,  440,  163,  410,  433,  581,  433,   89,  433,
 /*   800 */    83,   82,  433,   10,  580,  105,  601,  116,  433,  115,
 /*   810 */   162,    9,  114,  406,  426,  423,  420,  579,  113,  161,
 /*   820 */   601,    8,  578,  601,  160,  576,  576,  577,  593,  592,
 /*   830 */    95,  417,   73,   75,  569,  568,  571,  570,   88,   92,
 /*   840 */    90,   93,   91,    7,   87,   86,   85,   84,   81,   80,
 /*   850 */    79,   78,  601,    1,  601,  567,  601,  433,   71,  601,
 /*   860 */   411,    6,  590,  563,  124,  601,   21,  119,   98,   75,
 /*   870 */   569,  568,  571,  570,   88,   92,   90,   93,   91,   68,
 /*   880 */    87,   86,   85,   84,   81,   80,   79,   78,  295,    3,
 /*   890 */   433,  433,  560,   72,  409,   19,   60,  559,  597,  551,
 /*   900 */    45,  118,  591,  589,  550,   20,   18,  595,  548,   89,
 /*   910 */   433,   83,   82,  433,  601,  594,   69,   70,  320,  225,
 /*   920 */   129,  389,  433,  128,  546,  544,  431,  542,  541,  539,
 /*   930 */   186,  537,   45,  535,  154,  521,  576,  576,  183,   12,
 /*   940 */   406,  289,  519,  288,  287,  286,  671,  601,  601,  166,
 /*   950 */   250,  248,  249,  353,  433,   17,  433,  247,  433,  507,
 /*   960 */   222,  426,  423,  420,  127,  245,  134,  601,  100,   56,
 /*   970 */   601,  503,  406,   55,  505,  593,  592,  502,  417,  601,
 /*   980 */    75,  569,  568,  571,  570,   88,   92,   90,   93,   91,
 /*   990 */   223,   87,   86,   85,   84,   81,   80,   79,   78,  500,
 /*  1000 */   368,  152,  366,   22,  514,   71,  201,   22,  243,  590,
 /*  1010 */   493,  601,  597,  601,  125,  601,  597,  274,  362,  239,
 /*  1020 */   433,  595,  123,  236,  433,  595,  358,  433,  408,  594,
 /*  1030 */   104,  307,  385,  594,  103,  307,  385,   44,  221,  357,
 /*  1040 */   229,  151,    4,  220,  489,  433,  433,  433,  433,  591,
 /*  1050 */   589,  219,   20,  486,  482,  102,   50,  133,  132,  433,
 /*  1060 */   433,  349,  474,  433,  293,  433,  473,  303,  351,  131,
 /*  1070 */    43,  302,  433,   30,  204,   41,  301,  601,  433,  207,
 /*  1080 */   339,  601,   40,  337,  601,  336,  212,  126,   29,  593,
 /*  1090 */   592,  433,  211,  593,  592,  210,  433,  209,  208,  433,
 /*  1100 */   433,   39,  601,  601,  601,  601,  101,  206,  433,   38,
 /*  1110 */    16,  433,  205,   54,  203,  433,  601,  601,   37,  146,
 /*  1120 */   601,   36,  601,  590,  117,   35,  433,  590,  200,  601,
 /*  1130 */   433,  145,  433,  433,  433,  601,   34,  388,  199,  142,
 /*  1140 */    27,  144,   26,   33,   32,   53,   52,   14,  601,  141,
 /*  1150 */   452,  619,  617,  601,  298,  618,  601,  601,  297,  616,
 /*  1160 */   615,  296,  367,  591,  284,  601,  609,  591,  601,  449,
 /*  1170 */   448,  283,  601,   24,  374,  256,  280,  435,  279,  447,
 /*  1180 */   444,  274,  438,  601,  613,  126,   58,  601,  434,  601,
 /*  1190 */   601,  601,  599,   59,  601,  190,  402,  404,  443,  271,
 /*  1200 */   432,  272,   97,  596,  584,  174,  534,  270,   57,  269,
 /*  1210 */   390,  430,  428,  530,   64,  188,  386,  527,  380,  378,
 /*  1220 */   226,  352,  180,  178,  242,  598,  140,  908,  908,  382,
 /*  1230 */   908,  908,  513,  908,  908,  182,  241,  908,  364,  238,
 /*  1240 */   908,  363,  235,  230,  360,  237,  490,  492,  359,  488,
 /*  1250 */   356,  520,  228,  908,  260,  355,  354,   78,  483,  477,
 /*  1260 */   908,  532,  257,  480,  479,  528,  478,  304,  254,  216,
 /*  1270 */   214,  526,  525,  252,  476,  487,  150,  908,  350,  346,
 /*  1280 */   379,  508,  472,  246,  344,  506,  149,  218,  471,  342,
 /*  1290 */   470,  467,  340,  469,  135,  147,  332,  331,  143,  908,
 /*  1300 */   330,  327,  263,  454,  908,  329,  908,  148,  908,  195,
 /*  1310 */   908,  325,  908,  908,  908,  460,  908,  908,  908,  908,
 /*  1320 */   908,  908,  158,  908,  908,  908,  273,  908,  908,  908,
 /*  1330 */   908,  908,  436,  425,  459,  422,  496,  419,  416,  495,
 /*  1340 */   908,  908,  908,  908,  361,  122,  258,  908,  908,  908,
 /*  1350 */   908,  908,  908,  908,   11,  908,  456,  275,  908,  908,
 /*  1360 */   908,  908,  407,  255,  253,  908,  908,  908,  197,  908,
 /*  1370 */   328,  908,  908,  261,  908,  908,  908,  908,  908,  908,
 /*  1380 */   553,
};
const SQLParser_YYCODETYPE SQLParser::yy_lookahead[] = {
 /*     0 */    14,  188,   16,   85,   86,   87,   10,   89,   90,   91,
 /*    10 */    92,  198,  182,  183,   11,  185,  186,   28,  100,  101,
 /*    20 */     1,   35,    9,   37,   38,   36,   37,   38,   39,   39,
 /*    30 */   217,  188,  219,  203,   21,   39,   14,   37,   38,   11,
 /*    40 */   227,  153,  154,  155,  156,  215,  158,  159,   62,   63,
 /*    50 */   237,  238,  188,   28,   68,  225,   11,   35,  245,   37,
 /*    60 */    38,   36,   37,   38,   14,   43,   11,   17,   10,   19,
 /*    70 */    20,   16,   11,   10,   52,   37,   38,   16,  214,   37,
 /*    80 */    38,   11,   16,   20,   62,   63,  243,  244,  245,  103,
 /*    90 */    10,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*   100 */   114,  115,   39,  117,  118,  119,  120,  121,  122,  123,
 /*   110 */   124,  121,  112,  113,  114,  115,  116,  117,  118,  119,
 /*   120 */   120,  121,  122,  123,  124,  103,   25,  105,  106,  107,
 /*   130 */   108,  109,  110,  111,  112,  113,  114,  115,  121,  117,
 /*   140 */   118,  119,  120,  121,  122,  123,  124,   14,  136,  146,
 /*   150 */   147,  148,  135,   20,  142,  117,  118,  119,  120,  121,
 /*   160 */   122,  123,  124,  121,  122,  123,  124,  217,   35,  152,
 /*   170 */    37,   38,   39,   11,  146,  147,  148,  227,  121,  122,
 /*   180 */   123,  124,   28,   14,   37,   38,  135,  237,  221,   20,
 /*   190 */    36,  146,  147,  148,  221,   62,   63,   58,  248,  249,
 /*   200 */   142,   22,   23,  152,   35,   26,   37,   38,  153,  154,
 /*   210 */   155,  156,   73,  158,  159,  160,  146,  147,  148,  153,
 /*   220 */   154,  155,  156,  188,  158,  159,  160,  260,  261,  262,
 /*   230 */    73,   62,   63,  260,  261,  262,  103,  202,  105,  106,
 /*   240 */   107,  108,  109,  110,  111,  112,  113,  114,  115,   27,
 /*   250 */   117,  118,  119,  120,  121,  122,  123,  124,   19,  112,
 /*   260 */   113,  114,  115,   35,  117,  118,  119,  120,  121,  122,
 /*   270 */   123,  124,  103,   28,  105,  106,  107,  108,  109,  110,
 /*   280 */   111,  112,  113,  114,  115,   57,  117,  118,  119,  120,
 /*   290 */   121,  122,  123,  124,   14,  138,  146,  147,  148,  188,
 /*   300 */    28,   62,   63,  188,  188,  190,  149,   11,   36,  198,
 /*   310 */   195,  188,  217,  188,  174,   35,  176,   37,   38,  188,
 /*   320 */   195,  198,  227,  166,  167,  217,  169,   50,  217,  198,
 /*   330 */    14,   11,  237,  208,  209,  227,   16,  153,  227,  188,
 /*   340 */   188,  157,   62,   63,   29,  237,  107,  108,  237,  198,
 /*   350 */   219,   35,  247,   37,   38,   20,  245,   80,  242,  243,
 /*   360 */   244,  245,  210,  188,  256,  260,  261,  262,  245,  238,
 /*   370 */     0,    1,    2,  198,   39,   98,  245,  254,   62,   63,
 /*   380 */   260,  261,  262,  103,   16,  105,  106,  107,  108,  109,
 /*   390 */   110,  111,  112,  113,  114,  115,  245,  117,  118,  119,
 /*   400 */   120,  121,  122,  123,  124,  128,   39,  188,  153,  188,
 /*   410 */   133,  190,  157,  238,  263,   48,  195,  198,  141,  103,
 /*   420 */   245,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*   430 */   114,  115,  188,  117,  118,  119,  120,  121,  122,  123,
 /*   440 */   124,   11,  153,  153,   14,   10,  157,  157,  188,   14,
 /*   450 */    15,  239,  240,  241,   19,  175,  188,  238,  198,  188,
 /*   460 */    26,  248,  249,   28,  245,   35,  198,   37,   38,  198,
 /*   470 */    11,   36,   37,   38,   39,   16,   11,   11,  127,  219,
 /*   480 */    14,   16,   47,  178,  179,  180,  181,  219,  244,  245,
 /*   490 */   219,  175,   62,   63,   11,  144,  145,  135,  238,   16,
 /*   500 */   138,   35,  217,   37,   38,  245,  238,   28,  140,  238,
 /*   510 */   188,  188,  227,  245,   16,   36,  245,   82,   83,   84,
 /*   520 */   198,  198,  237,  204,  205,   11,  207,   25,   62,   63,
 /*   530 */    16,   96,   97,  103,   99,  105,  106,  107,  108,  109,
 /*   540 */   110,  111,  112,  113,  114,  115,   30,  117,  118,  119,
 /*   550 */   120,  121,  122,  123,  124,  153,  121,   11,   28,  157,
 /*   560 */   238,  126,   16,  204,  205,  130,  207,  245,  245,  103,
 /*   570 */    28,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*   580 */   114,  115,  217,  117,  118,  119,  120,  121,  122,  123,
 /*   590 */   124,   11,  227,  188,   14,   10,   10,  153,   11,   14,
 /*   600 */    15,  157,  237,   16,   19,  170,  171,  188,  173,  204,
 /*   610 */   205,  135,  230,   28,  138,   35,  188,   37,   38,  188,
 /*   620 */   188,   36,   37,   38,   39,   39,  198,   43,  246,  198,
 /*   630 */    14,  188,   47,   10,  196,  196,   52,  188,   11,  188,
 /*   640 */   188,   10,   62,   63,  206,  206,  214,  219,  188,  198,
 /*   650 */    35,   35,  188,   37,   38,  188,   10,  214,  198,  210,
 /*   660 */   188,  188,  198,  165,  196,  198,  238,   82,   83,   84,
 /*   670 */   198,  198,  253,  245,  206,  223,  245,  188,   62,   63,
 /*   680 */   188,   96,   97,  103,   99,  105,  106,  107,  108,  109,
 /*   690 */   110,  111,  112,  113,  114,  115,  245,  117,  118,  119,
 /*   700 */   120,  121,  122,  123,  124,  245,  196,  142,  188,  245,
 /*   710 */   188,  126,  245,  180,  181,  130,  206,  245,  245,  103,
 /*   720 */   198,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*   730 */   114,  115,   17,  117,  118,  119,  120,  121,  122,  123,
 /*   740 */   124,   14,   10,  223,  255,  253,   14,   15,  188,  188,
 /*   750 */   188,   19,  188,   10,   39,  170,  171,   39,  173,  198,
 /*   760 */    28,  199,   35,  188,   37,   38,  188,  245,   36,   37,
 /*   770 */    38,   39,  142,  198,  214,  138,  198,   14,  214,   47,
 /*   780 */   188,  188,   39,    1,    2,  222,  149,  224,   11,   62,
 /*   790 */    63,  199,  199,   10,  219,  188,   11,  188,   35,  188,
 /*   800 */    37,   38,  188,   16,   11,  198,  245,  198,  188,  198,
 /*   810 */    10,   16,  198,  238,   82,   83,   84,   11,  198,   10,
 /*   820 */   245,   16,   11,  245,   10,   62,   63,   11,   96,   97,
 /*   830 */   103,   99,  105,  106,  107,  108,  109,  110,  111,  112,
 /*   840 */   113,  114,  115,   16,  117,  118,  119,  120,  121,  122,
 /*   850 */   123,  124,  245,   10,  245,  135,  245,  188,  126,  245,
 /*   860 */    16,   10,  130,   11,   10,  245,   10,  198,  105,  106,
 /*   870 */   107,  108,  109,  110,  111,  112,  113,  114,  115,   16,
 /*   880 */   117,  118,  119,  120,  121,  122,  123,  124,   14,   10,
 /*   890 */   188,  188,    7,   14,   15,   25,   16,   11,   19,  153,
 /*   900 */   198,  198,  170,  171,  153,  173,   25,   28,  153,   35,
 /*   910 */   188,   37,   38,  188,  245,   36,   37,   38,   39,    9,
 /*   920 */   198,  219,  188,  198,  153,  153,   47,  153,  153,  153,
 /*   930 */    11,  153,  198,  153,   10,  151,   62,   63,  142,   10,
 /*   940 */   238,    4,   11,    6,    7,    8,  142,  245,  245,   12,
 /*   950 */   142,   11,  142,  219,  188,   25,  188,   10,  188,   11,
 /*   960 */    50,   82,   83,   84,  198,   11,  198,  245,  198,   35,
 /*   970 */   245,   18,  238,   10,   33,   96,   97,   19,   99,  245,
 /*   980 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
 /*   990 */    80,  117,  118,  119,  120,  121,  122,  123,  124,   21,
 /*  1000 */    18,   10,   14,   10,   11,  126,   69,   10,    9,  130,
 /*  1010 */    15,  245,   19,  245,   10,  245,   19,  138,   11,   32,
 /*  1020 */   188,   28,   20,   80,  188,   28,  129,  188,  149,   36,
 /*  1030 */   198,   38,   39,   36,  198,   38,   39,  198,  128,   25,
 /*  1040 */   136,   10,   10,  133,  130,  188,  188,  188,  188,  170,
 /*  1050 */   171,  141,  173,   11,   15,  198,  198,  198,  198,  188,
 /*  1060 */   188,   35,  130,  188,  127,  188,  130,  132,  131,  198,
 /*  1070 */   198,  134,  188,  198,    9,  198,  139,  245,  188,  140,
 /*  1080 */   143,  245,  198,   24,  245,   57,  136,  150,  198,   96,
 /*  1090 */    97,  188,  137,   96,   97,  136,  188,  137,  136,  188,
 /*  1100 */   188,  198,  245,  245,  245,  245,  198,  136,  188,  198,
 /*  1110 */   198,  188,  140,   10,   16,  188,  245,  245,  198,   48,
 /*  1120 */   245,  198,  245,  130,   35,  198,  188,  130,  142,  245,
 /*  1130 */   188,  137,  188,  188,  188,  245,  198,  188,  142,  131,
 /*  1140 */   198,  140,  198,  198,  198,   35,   35,  198,  245,  168,
 /*  1150 */     3,  184,  184,  245,  197,    5,  245,  245,  197,  184,
 /*  1160 */   184,  197,   13,  170,  187,  245,   39,  170,  245,  189,
 /*  1170 */   191,  188,  245,   16,   32,  142,  192,   34,  193,   24,
 /*  1180 */   188,  138,   31,  245,  194,  150,  165,  245,  188,  245,
 /*  1190 */   245,  245,  227,  163,  245,  225,  162,  161,  200,  233,
 /*  1200 */   188,  232,  164,  188,   39,  189,  188,  234,  136,  235,
 /*  1210 */    32,  206,  206,  188,  174,  264,   39,  188,  172,   24,
 /*  1220 */    32,   13,  145,  103,  187,  236,   10,  266,  266,  188,
 /*  1230 */   266,  266,  188,  266,  266,  188,  188,  266,  189,  188,
 /*  1240 */   266,  191,  188,  187,  189,  193,  188,  194,  188,  188,
 /*  1250 */   188,  241,  188,  266,  251,  189,  188,  124,  189,  189,
 /*  1260 */   266,  252,  251,  188,  188,  252,  188,  188,  251,  188,
 /*  1270 */   188,  252,  252,  251,  189,  218,  213,  266,  188,  188,
 /*  1280 */   235,  258,  188,  259,  188,  258,  213,  213,  188,  188,
 /*  1290 */   188,  224,  188,  188,  188,  188,  188,  188,  211,  266,
 /*  1300 */   188,  188,  188,  211,  266,  225,  266,  188,  266,  225,
 /*  1310 */   266,  225,  266,  266,  266,  232,  266,  266,  266,  266,
 /*  1320 */   266,  266,  229,  266,  266,  266,  231,  266,  266,  266,
 /*  1330 */   266,  266,  201,  201,  212,  201,  221,  201,  201,  221,
 /*  1340 */   266,  266,  266,  266,  216,  257,  247,  266,  266,  266,
 /*  1350 */   266,  266,  266,  266,  229,  266,  232,  228,  266,  266,
 /*  1360 */   266,  266,  265,  247,  247,  266,  266,  266,  247,  266,
 /*  1370 */   247,  266,  266,  247,  266,  266,  266,  266,  266,  266,
 /*  1380 */   250,
};
const short SQLParser::yy_shift_ofst[] = {
 /*     0 */   782,  879,  937,  879,  585,  585,  585,  585,  585,  585,
 /*    10 */   585,  585,  997,  637,  133,   22,   22,  585,  585,  585,
 /*    20 */   585,  585,  997,  157,  715,  -14,  580,  466,  430,  316,
 /*    30 */   280,  169,  616,  616,  616,  616,  616,  616,  616,  616,
 /*    40 */   616,  616,  616,  616,  727,  616,  616,  616,  763,  874,
 /*    50 */   874,  435,  585,  585,  585,  585,  585,  585,  585,  585,
 /*    60 */   585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
 /*    70 */   585,  585,  585,  585,  585,  732,  585,  585,  585,  585,
 /*    80 */   585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
 /*    90 */   585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
 /*   100 */     0,  147,  147,  147,  147,  147,  147,  993,  997,   38,
 /*   110 */    38,   38,   38,   42,   42,   42,   42,  -11,   57,   57,
 /*   120 */    25,   25,  637,  637,  637, 1127, 1177, 1133, 1133, 1133,
 /*   130 */  1127, -113, -113, -113, -113,  351,  370,  743,  743,  743,
 /*   140 */  1127, 1127, 1127, 1127, 1127, 1127, 1127, 1165, 1165, 1127,
 /*   150 */  1127, 1127, 1127, 1165, 1127, 1165, 1127, -113, -113,   55,
 /*   160 */   -82,  -82,  -82,  -82,  -82,   66,  277,   70,   45,   28,
 /*   170 */     3,  150,  150,  150,   63,   17,  498,  335,  139,  335,
 /*   180 */   367,  584,  584,  -10,  335,  335,  335,  586,  140,  368,
 /*   190 */    51, 1120, 1216, 1035, 1127, 1120, 1035, 1021, 1035, 1127,
 /*   200 */  1127, 1127, 1127, 1077, 1127, 1127, 1127, 1127, 1127, 1127,
 /*   210 */  1127, 1127, 1127, 1127, 1033, 1127, 1033, 1127, 1127, 1208,
 /*   220 */  1127, 1127, 1127, 1208, 1033, 1208, 1127, 1188, 1033, 1127,
 /*   230 */  1127, 1149, 1127, 1127, 1127, 1033, 1127, 1155, 1143, 1127,
 /*   240 */  1157, 1033, 1127, 1149, 1127, 1046, 1036, 1195, 1046, 1127,
 /*   250 */  1127, 1177, 1178, 1072, 1178, 1072, 1127, 1178, 1072, 1127,
 /*   260 */  1178, 1072, 1127, 1033, 1040, 1165, 1165, 1127, 1127, 1038,
 /*   270 */  1036, 1030, 1034, 1021, 1035, 1043, 1127, 1151, 1127, 1155,
 /*   280 */  1143, 1142, 1157, 1033, 1127, 1149, 1150, 1150, 1150, 1150,
 /*   290 */  -113, -113, -113,  910, -112,  239,   50,   50,   50,  179,
 /*   300 */   587,  476,  362,  228,   12,  546,  514,  479,  483,  444,
 /*   310 */   402,  290,  289,  255,  184,  465,  459,  272,  154,   -4,
 /*   320 */    58,  320,   61,   13, 1147,  981, 1111, 1110, 1008, 1001,
 /*   330 */  1089,  996,  986,  994, 1071, 1098, 1103, 1028, 1059, 1065,
 /*   340 */   972,  971,  939,  962,  960,  959,  955,  950,  936,  932,
 /*   350 */  1026,  935, 1039, 1042, 1032, 1031,  904,  914, 1014,  897,
 /*   360 */  1002,  943,  987, 1007, 1004,  999,  995,  988,  991,  982,
 /*   370 */   978,  963,  958,  953,  941,  934,  954,  863,  930,  948,
 /*   380 */   947,  940,  810,  808,  931,  804,  929,  784,  796,  919,
 /*   390 */   924,  780,  778,  776,  775,  774,  772,  771,  755,  751,
 /*   400 */   746,  863,  881,  880,  870,  886,  863,  885,  856,  854,
 /*   410 */   852,  851,  844,  720,  843,  816,  827,  814,  811,  805,
 /*   420 */   809,  806,  795,  800,  793,  787,  783,  785,  718,  777,
 /*   430 */   718,  646,  630,  565,  615,  631,  627,  542,  623,  530,
 /*   440 */   516,  434,  502,  315,  296,  245,  222,  101,  162,   80,
 /*   450 */    19,
};
const short SQLParser::yy_reduce_ofst[] = {
 /*     0 */   305, -187, -170,  111,  734,  702,  575,  428,  271,  268,
 /*    10 */   260,  131,  116,  -50,  105,  -27,  -33,  322,  219,  123,
 /*    20 */   151,  175, -157,  108,  125,  120,  120,  120,  120,  120,
 /*    30 */   120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
 /*    40 */   120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
 /*    50 */   120,  949,  946,  945,  944,  942,  938,  927,  923,  920,
 /*    60 */   912,  911,  908,  903,  890,  884,  877,  875,  872,  871,
 /*    70 */   860,  859,  858,  857,  839,  836,  832,  770,  768,  766,
 /*    80 */   725,  722,  703,  669,  620,  614,  611,  609,  607,  578,
 /*    90 */   561,  522,  473,  472,  467,  464,  460,  451,  431,  323,
 /*   100 */   120,  120,  120,  120,  120,  120,  120,  244,  244,  120,
 /*   110 */   120,  120,  120,  120,  120,  120,  120,  405,  120,  120,
 /*   120 */   359,  319,  365,  285,   95,  221,  212,  120,  120,  120,
 /*   130 */   115,  120,  120,  120,  120,  563,  533,  593,  592,  562,
 /*   140 */   492,  564,  489,  560,  443,  520,  452,  510,  468,  432,
 /*   150 */  -136,  449,  152,  439,  419,  438,   35,  213,  382, 1130,
 /*   160 */  1137, 1136, 1134, 1132, 1131, 1130, 1128, 1129, 1129, 1129,
 /*   170 */  1129, 1129, 1129, 1129, 1126, 1125, 1124, 1123, 1122, 1121,
 /*   180 */  1119, 1118, 1115, 1012, 1117, 1116, 1099, 1114, 1097, 1095,
 /*   190 */  1093, 1092, 1088, 1086, 1113, 1087, 1084, 1083, 1080, 1112,
 /*   200 */  1109, 1108, 1107, 1067, 1106, 1105, 1104, 1102, 1101, 1100,
 /*   210 */  1096, 1094, 1091, 1090, 1085, 1082, 1070, 1081, 1079, 1074,
 /*   220 */  1078, 1076, 1075, 1073, 1069, 1063, 1068, 1057, 1066, 1064,
 /*   230 */  1062, 1056, 1061, 1060, 1058, 1055, 1054, 1053, 1052, 1051,
 /*   240 */  1050, 1049, 1048, 1037, 1047, 1027, 1045, 1024, 1023, 1044,
 /*   250 */  1041, 1010, 1020, 1022, 1019, 1017, 1029, 1013, 1011, 1025,
 /*   260 */  1009, 1003, 1018, 1016,  951, 1006, 1005, 1015, 1012,  989,
 /*   270 */   974,  973,  966,  969,  970,  965, 1000,  998,  992,  990,
 /*   280 */   985,  984,  979,  980,  983,  977,  976,  975,  968,  967,
 /*   290 */   964,  961,  957,
};
const SQLParser_YYACTIONTYPE SQLParser::yy_default[] = {
 /*     0 */   629,  903,  744,  906,  903,  903,  903,  903,  903,  903,
 /*    10 */   903,  903,  751,  775,  771,  717,  717,  906,  906,  906,
 /*    20 */   901,  906,  906,  906,  906,  814,  906,  906,  906,  906,
 /*    30 */   906,  906,  822,  821,  665,  801,  818,  812,  816,  897,
 /*    40 */   898,  896,  900,  904,  906,  905,  815,  664,  856,  855,
 /*    50 */   882,  906,  906,  906,  906,  906,  906,  906,  906,  906,
 /*    60 */   906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
 /*    70 */   906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
 /*    80 */   906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
 /*    90 */   906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
 /*   100 */   875,  881,  888,  880,  876,  862,  861,  906,  750,  857,
 /*   110 */   860,  859,  858,  866,  865,  864,  863,  906,  868,  867,
 /*   120 */   906,  906,  906,  906,  906,  906,  746,  871,  870,  869,
 /*   130 */   906,  885,  884,  883,  872,  906,  629,  906,  906,  906,
 /*   140 */   906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
 /*   150 */   906,  906,  906,  906,  906,  906,  906,  775,  765,  906,
 /*   160 */   906,  906,  906,  906,  906,  773,  641,  906,  906,  906,
 /*   170 */   906,  823,  732,  693,  771,  763,  817,  771,  906,  771,
 /*   180 */   906,  717,  717,  906,  771,  771,  771,  906,  899,  772,
 /*   190 */   763,  685,  826,  744,  906,  685,  744,  817,  744,  906,
 /*   200 */   906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
 /*   210 */   906,  906,  906,  906,  780,  906,  780,  906,  906,  691,
 /*   220 */   906,  906,  906,  691,  780,  691,  906,  711,  780,  906,
 /*   230 */   906,  642,  906,  906,  906,  780,  906,  652,  662,  906,
 /*   240 */   681,  780,  906,  642,  906,  851,  805,  853,  851,  906,
 /*   250 */   906,  745,  804,  802,  804,  802,  906,  804,  802,  906,
 /*   260 */   804,  802,  906,  780,  906,  675,  673,  906,  906,  813,
 /*   270 */   805,  811,  809,  817,  744,  906,  906,  906,  906,  652,
 /*   280 */   662,  658,  681,  780,  906,  642,  634,  634,  634,  634,
 /*   290 */   647,  647,  647,  906,  906,  906,  728,  727,  646,  906,
 /*   300 */   906,  906,  906,  906,  720,  906,  906,  906,  906,  906,
 /*   310 */   906,  906,  906,  906,  906,  906,  906,  906,  906,  672,
 /*   320 */   833,  906,  906,  906,  630,  906,  906,  906,  906,  906,
 /*   330 */   906,  906,  906,  906,  906,  722,  906,  906,  906,  906,
 /*   340 */   906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
 /*   350 */   906,  906,  906,  906,  906,  906,  906,  906,  906,  700,
 /*   360 */   906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
 /*   370 */   906,  906,  906,  906,  906,  906,  906,  854,  906,  906,
 /*   380 */   906,  906,  759,  906,  906,  758,  906,  906,  906,  906,
 /*   390 */   906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
 /*   400 */   906,  810,  906,  806,  906,  906,  902,  906,  906,  906,
 /*   410 */   906,  906,  740,  735,  906,  906,  906,  906,  906,  906,
 /*   420 */   906,  906,  906,  906,  906,  906,  906,  906,  676,  906,
 /*   430 */   674,  906,  834,  906,  906,  906,  906,  906,  906,  906,
 /*   440 */   906,  906,  906,  654,  906,  906,  906,  906,  906,  906,
 /*   450 */   906,  626,  631,  825,  824,  827,  820,  688,  687,  686,
 /*   460 */   819,  731,  730,  729,  725,  724,  723,  726,  721,  709,
 /*   470 */   708,  707,  706,  702,  701,  692,  719,  718,  705,  703,
 /*   480 */   698,  696,  690,  782,  689,  666,  712,  710,  704,  699,
 /*   490 */   697,  695,  667,  643,  644,  714,  713,  684,  683,  682,
 /*   500 */   651,  650,  649,  648,  645,  659,  850,  852,  849,  831,
 /*   510 */   892,  748,  753,  760,  757,  756,  755,  754,  752,  749,
 /*   520 */   747,  743,  768,  767,  766,  779,  778,  781,  777,  829,
 /*   530 */   828,  803,  776,  770,  769,  800,  799,  798,  797,  796,
 /*   540 */   795,  794,  793,  792,  791,  790,  789,  788,  787,  786,
 /*   550 */   785,  784,  783,  774,  764,  808,  807,  716,  715,  891,
 /*   560 */   895,  741,  894,  742,  893,  738,  737,  736,  889,  886,
 /*   570 */   878,  877,  890,  887,  879,  874,  873,  847,  846,  845,
 /*   580 */   844,  843,  680,  679,  677,  678,  670,  669,  668,  842,
 /*   590 */   841,  840,  839,  838,  837,  836,  835,  832,  739,  734,
 /*   600 */   733,  830,  762,  761,  663,  848,  657,  656,  655,  671,
 /*   610 */   661,  660,  653,  640,  639,  638,  637,  636,  635,  633,
 /*   620 */   632,  628,  627,  625,
};

#ifdef SQLParser_YYFALLBACK
	const SQLParser_YYCODETYPE SQLParser::yyFallback[] = {
    0,  /*          $ => nothing */
    0,  /*       SEMI => nothing */
   39,  /*    EXPLAIN => ID */
   39,  /*    ANALYZE => ID */
   39,  /*      BEGIN => ID */
    0,  /* TRANSACTION => nothing */
    0,  /*     COMMIT => nothing */
   39,  /*        END => ID */
   39,  /*   ROLLBACK => ID */
    0,  /*      TABLE => nothing */
    0,  /*         LP => nothing */
    0,  /*         RP => nothing */
    0,  /*     CREATE => nothing */
    0,  /*         IF => nothing */
    0,  /*        NOT => nothing */
    0,  /*     EXISTS => nothing */
    0,  /*      COMMA => nothing */
    0,  /*    PRIMARY => nothing */
   39,  /*        KEY => ID */
    0,  /*       NULL => nothing */
    0,  /*         AS => nothing */
   39,  /*    VIRTUAL => ID */
   39,  /*      RANGE => ID */
   39,  /*   INTERVAL => ID */
   39,  /*  PARTITION => ID */
   39,  /*         BY => ID */
   39,  /*       HASH => ID */
   39,  /* PARTITIONS => ID */
    0,  /*    INTEGER => nothing */
   39,  /* SUBPARTITION => ID */
   39,  /* SUBPARTITIONS => ID */
   39,  /*      EVERY => ID */
    0,  /*      USING => nothing */
   39,  /* TIMESERIES => ID */
   39,  /*       WITH => ID */
    0,  /*         EQ => nothing */
    0,  /*      FLOAT => nothing */
    0,  /*       PLUS => nothing */
    0,  /*      MINUS => nothing */
    0,  /*         ID => nothing */
   39,  /*      ABORT => ID */
   39,  /*     ACTION => ID */
   39,  /*      AFTER => ID */
   39,  /*        ASC => ID */
   39,  /*     ATTACH => ID */
   39,  /*     BEFORE => ID */
   39,  /*    CASCADE => ID */
   39,  /*       CAST => ID */
   39,  /*   COLUMNKW => ID */
   39,  /*   CONFLICT => ID */
   39,  /*   DATABASE => ID */
   39,  /*   DEFERRED => ID */
   39,  /*       DESC => ID */
   39,  /*     DETACH => ID */
   39,  /*       EACH => ID */
   39,  /*  EXCLUSIVE => ID */
   39,  /*       FAIL => ID */
   39,  /*        FOR => ID */
   39,  /*     IGNORE => ID */
   39,  /*  IMMEDIATE => ID */
   39,  /*  INITIALLY => ID */
   39,  /*    INSTEAD => ID */
   39,  /*    LIKE_KW => ID */
   39,  /*      MATCH => ID */
   39,  /*         NO => ID */
   39,  /*       PLAN => ID */
   39,  /*      QUERY => ID */
   39,  /*         OF => ID */
   39,  /*     OFFSET => ID */
   39,  /*     PRAGMA => ID */
   39,  /*      RAISE => ID */
   39,  /*  RECURSIVE => ID */
   39,  /*    RELEASE => ID */
   39,  /*    REPLACE => ID */
   39,  /*   RESTRICT => ID */
   39,  /*        ROW => ID */
   39,  /*  SAVEPOINT => ID */
   39,  /*       TEMP => ID */
   39,  /*    TRIGGER => ID */
   39,  /*     VACUUM => ID */
   39,  /*       VIEW => ID */
   39,  /*    WITHOUT => ID */
   39,  /*    EXTRACT => ID */
   39,  /* TIMESTAMPADD => ID */
   39,  /* TIMESTAMPDIFF => ID */
   39,  /*       YEAR => ID */
   39,  /*      MONTH => ID */
   39,  /*        DAY => ID */
   39,  /*       WEEK => ID */
   39,  /*       HOUR => ID */
   39,  /*     MINUTE => ID */
   39,  /*     SECOND => ID */
   39,  /* MILLISECOND => ID */
   39,  /*       GLOB => ID */
   39,  /*       LIKE => ID */
   39,  /*     REGEXP => ID */
   39,  /*       TRUE => ID */
   39,  /*      FALSE => ID */
   39,  /*      FORCE => ID */
   39,  /* TIMESTAMP_TRUNC => ID */
   39,  /* DAY_OF_WEEK => ID */
   39,  /* DAY_OF_YEAR => ID */
	};
#endif /* SQLParser_YYFALLBACK */

#ifndef NDEBUG
	/* For tracing shifts, the names of all terminals and nonterminals
	 ** are required.  The following table supplies these names */
	const char *const SQLParser::yyTokenName[] = {
  "$",             "SEMI",          "EXPLAIN",       "ANALYZE",     
  "BEGIN",         "TRANSACTION",   "COMMIT",        "END",         
  "ROLLBACK",      "TABLE",         "LP",            "RP",          
  "CREATE",        "IF",            "NOT",           "EXISTS",      
  "COMMA",         "PRIMARY",       "KEY",           "NULL",        
  "AS",            "VIRTUAL",       "RANGE",         "INTERVAL",    
  "PARTITION",     "BY",            "HASH",          "PARTITIONS",  
  "INTEGER",       "SUBPARTITION",  "SUBPARTITIONS",  "EVERY",       
  "USING",         "TIMESERIES",    "WITH",          "EQ",          
  "FLOAT",         "PLUS",          "MINUS",         "ID",          
  "ABORT",         "ACTION",        "AFTER",         "ASC",         
  "ATTACH",        "BEFORE",        "CASCADE",       "CAST",        
  "COLUMNKW",      "CONFLICT",      "DATABASE",      "DEFERRED",    
  "DESC",          "DETACH",        "EACH",          "EXCLUSIVE",   
  "FAIL",          "FOR",           "IGNORE",        "IMMEDIATE",   
  "INITIALLY",     "INSTEAD",       "LIKE_KW",       "MATCH",       
  "NO",            "PLAN",          "QUERY",         "OF",          
  "OFFSET",        "PRAGMA",        "RAISE",         "RECURSIVE",   
  "RELEASE",       "REPLACE",       "RESTRICT",      "ROW",         
  "SAVEPOINT",     "TEMP",          "TRIGGER",       "VACUUM",      
  "VIEW",          "WITHOUT",       "EXTRACT",       "TIMESTAMPADD",
  "TIMESTAMPDIFF",  "YEAR",          "MONTH",         "DAY",         
  "WEEK",          "HOUR",          "MINUTE",        "SECOND",      
  "MILLISECOND",   "GLOB",          "LIKE",          "REGEXP",      
  "TRUE",          "FALSE",         "FORCE",         "TIMESTAMP_TRUNC",
  "DAY_OF_WEEK",   "DAY_OF_YEAR",   "ANY",           "OR",          
  "XOR",           "AND",           "IS",            "BETWEEN",     
  "IN",            "ISNULL",        "NOTNULL",       "NE",          
  "GT",            "LE",            "LT",            "GE",          
  "ESCAPE",        "BITAND",        "BITOR",         "LSHIFT",      
  "RSHIFT",        "STAR",          "SLASH",         "REM",         
  "CONCAT",        "COLLATE",       "BITNOT",        "DROP",        
  "USER",          "IDENTIFIED",    "STRING",        "SET",         
  "PASSWORD",      "ROLE",          "GRANT",         "ALL",         
  "ON",            "TO",            "SELECT",        "REVOKE",      
  "FROM",          "INDEX",         "DOT",           "ALTER",       
  "RENAME",        "ADD",           "UNION",         "EXCEPT",      
  "INTERSECT",     "VALUES",        "HINT_START",    "HINT_END",    
  "DISTINCT",      "JOIN",          "INNER",         "CROSS",       
  "LEFT",          "OUTER",         "RIGHT",         "FULL",        
  "NATURAL",       "ORDER",         "GROUP",         "HAVING",      
  "LIMIT",         "WHERE",         "DELETE",        "UPDATE",      
  "INTO",          "INSERT",        "BLOB",          "VARIABLE",    
  "OVER",          "CASE",          "WHEN",          "THEN",        
  "ELSE",          "error",         "input",         "cmdlist",     
  "ecmd",          "explain",       "cmdx",          "cmd",         
  "trans_opt",     "create_table",  "createkw",      "ifnotexists", 
  "nm",            "dbnm",          "columnlist",    "conslist_opt",
  "is_timeseries",  "createtable_opt",  "partitioning_options",  "column",      
  "typetoken",     "carglist",      "expr",          "singlecol",   
  "intervalOption",  "field",         "createtable_optlist",  "create_virtual_table",
  "plus_num",      "minus_num",     "typename",      "signed",      
  "conslist",      "tcons",         "idxlist",       "orconf",      
  "resolvetype",   "ifexists",      "fullname",      "create_view", 
  "force",         "select",        "using_options",  "exprlist",    
  "idxlist_opt",   "sortascending",  "addcolumnlist",  "renamecolumn",
  "addcolumn",     "hint_opt",      "selectnowith",  "oneselect",   
  "multiselect_op",  "distinct",      "selcollist",    "from",        
  "where_opt",     "groupby_opt",   "having_opt",    "orderby_opt", 
  "limit_opt",     "valuelist",     "nexprlist",     "hintlist",    
  "hintlist1",     "onehint",       "hintexprlist",  "hintexprlist1",
  "hintexpr",      "term",          "sclp",          "as",          
  "seltabtree",    "stl_prefix",    "joinop",        "on_opt",      
  "using_opt",     "idlist",        "sortlist",      "setlist",     
  "insert_cmd",    "inscollist_opt",  "window_opt",    "partitionby_opt",
  "likeop",        "between_op",    "in_op",         "case_operand",
  "case_exprlist",  "case_else",   
	};
#endif /* NDEBUG */

#ifndef NDEBUG
	/* For tracing reduce actions, the names of all rules are required.
	 */
	const char *const SQLParser::yyRuleName[] = {
 /*   0 */ "input ::= cmdlist",
 /*   1 */ "cmdlist ::= cmdlist ecmd",
 /*   2 */ "cmdlist ::= ecmd",
 /*   3 */ "ecmd ::= SEMI",
 /*   4 */ "ecmd ::= explain cmdx SEMI",
 /*   5 */ "explain ::=",
 /*   6 */ "explain ::= EXPLAIN",
 /*   7 */ "explain ::= EXPLAIN ANALYZE",
 /*   8 */ "cmdx ::= cmd",
 /*   9 */ "cmd ::= BEGIN trans_opt",
 /*  10 */ "trans_opt ::=",
 /*  11 */ "trans_opt ::= TRANSACTION",
 /*  12 */ "cmd ::= COMMIT trans_opt",
 /*  13 */ "cmd ::= END trans_opt",
 /*  14 */ "cmd ::= ROLLBACK trans_opt",
 /*  15 */ "cmd ::= create_table",
 /*  16 */ "create_table ::= createkw TABLE ifnotexists nm dbnm LP columnlist conslist_opt RP is_timeseries createtable_opt partitioning_options",
 /*  17 */ "createkw ::= CREATE",
 /*  18 */ "ifnotexists ::=",
 /*  19 */ "ifnotexists ::= IF NOT EXISTS",
 /*  20 */ "columnlist ::= column",
 /*  21 */ "columnlist ::= columnlist COMMA column",
 /*  22 */ "column ::= nm typetoken carglist",
 /*  23 */ "carglist ::=",
 /*  24 */ "carglist ::= carglist PRIMARY KEY",
 /*  25 */ "carglist ::= carglist NOT NULL",
 /*  26 */ "carglist ::= carglist NULL",
 /*  27 */ "carglist ::= carglist AS LP expr RP VIRTUAL",
 /*  28 */ "partitioning_options ::=",
 /*  29 */ "partitioning_options ::= PARTITION BY HASH singlecol PARTITIONS INTEGER",
 /*  30 */ "partitioning_options ::= PARTITION BY RANGE|INTERVAL singlecol intervalOption",
 /*  31 */ "partitioning_options ::= PARTITION BY RANGE|INTERVAL singlecol intervalOption SUBPARTITION BY HASH singlecol SUBPARTITIONS INTEGER",
 /*  32 */ "intervalOption ::= EVERY LP INTEGER RP",
 /*  33 */ "intervalOption ::= EVERY LP INTEGER COMMA field RP",
 /*  34 */ "is_timeseries ::=",
 /*  35 */ "is_timeseries ::= USING TIMESERIES",
 /*  36 */ "singlecol ::= nm",
 /*  37 */ "singlecol ::= LP nm RP",
 /*  38 */ "createtable_opt ::=",
 /*  39 */ "createtable_opt ::= WITH LP createtable_optlist RP",
 /*  40 */ "createtable_optlist ::= createtable_optlist COMMA nm EQ expr",
 /*  41 */ "createtable_optlist ::= nm EQ expr",
 /*  42 */ "cmd ::= create_virtual_table",
 /*  43 */ "create_virtual_table ::= createkw VIRTUAL TABLE ifnotexists nm dbnm LP columnlist conslist_opt RP USING nm createtable_opt partitioning_options",
 /*  44 */ "plus_num ::= PLUS INTEGER|FLOAT",
 /*  45 */ "plus_num ::= INTEGER|FLOAT",
 /*  46 */ "minus_num ::= MINUS INTEGER|FLOAT",
 /*  47 */ "nm ::= ID",
 /*  48 */ "typetoken ::= typename",
 /*  49 */ "typetoken ::= typename LP signed RP",
 /*  50 */ "typetoken ::= typename LP signed RP typename",
 /*  51 */ "typetoken ::= typename LP signed COMMA signed RP",
 /*  52 */ "typetoken ::= typename LP signed COMMA signed RP typename",
 /*  53 */ "typename ::= ID",
 /*  54 */ "typename ::= typename ID",
 /*  55 */ "signed ::= plus_num",
 /*  56 */ "signed ::= minus_num",
 /*  57 */ "conslist_opt ::=",
 /*  58 */ "conslist_opt ::= COMMA conslist",
 /*  59 */ "conslist ::= tcons",
 /*  60 */ "tcons ::= PRIMARY KEY LP idxlist RP",
 /*  61 */ "orconf ::=",
 /*  62 */ "orconf ::= OR resolvetype",
 /*  63 */ "resolvetype ::= IGNORE",
 /*  64 */ "resolvetype ::= REPLACE",
 /*  65 */ "cmd ::= DROP TABLE ifexists fullname",
 /*  66 */ "ifexists ::= IF EXISTS",
 /*  67 */ "ifexists ::=",
 /*  68 */ "cmd ::= create_view",
 /*  69 */ "create_view ::= CREATE force VIEW nm dbnm AS select",
 /*  70 */ "force ::=",
 /*  71 */ "force ::= FORCE",
 /*  72 */ "cmd ::= DROP VIEW ifexists fullname",
 /*  73 */ "cmd ::= CREATE DATABASE nm",
 /*  74 */ "cmd ::= DROP DATABASE nm",
 /*  75 */ "cmd ::= CREATE USER nm IDENTIFIED BY STRING",
 /*  76 */ "cmd ::= CREATE USER nm",
 /*  77 */ "cmd ::= SET PASSWORD FOR nm EQ STRING",
 /*  78 */ "cmd ::= SET PASSWORD EQ STRING",
 /*  79 */ "cmd ::= DROP USER nm",
 /*  80 */ "cmd ::= CREATE ROLE nm",
 /*  81 */ "cmd ::= DROP ROLE nm",
 /*  82 */ "cmd ::= GRANT ALL ON nm TO nm",
 /*  83 */ "cmd ::= GRANT SELECT ON nm TO nm",
 /*  84 */ "cmd ::= REVOKE ALL ON nm FROM nm",
 /*  85 */ "cmd ::= REVOKE SELECT ON nm FROM nm",
 /*  86 */ "cmd ::= CREATE INDEX ifnotexists nm ON nm dbnm LP idxlist RP using_options",
 /*  87 */ "using_options ::=",
 /*  88 */ "using_options ::= USING nm LP exprlist RP",
 /*  89 */ "idxlist ::= idxlist COMMA nm sortascending",
 /*  90 */ "idxlist ::= nm sortascending",
 /*  91 */ "sortascending ::= ASC",
 /*  92 */ "sortascending ::= DESC",
 /*  93 */ "sortascending ::=",
 /*  94 */ "cmd ::= DROP INDEX ifexists nm ON nm dbnm",
 /*  95 */ "cmd ::= DROP INDEX ifexists nm DOT nm dbnm",
 /*  96 */ "cmd ::= DROP INDEX ifexists nm",
 /*  97 */ "cmd ::= ALTER TABLE nm DROP PARTITION FOR LP expr RP",
 /*  98 */ "cmd ::= ALTER TABLE nm addcolumnlist",
 /*  99 */ "cmd ::= ALTER TABLE nm RENAME COLUMNKW renamecolumn TO renamecolumn",
 /* 100 */ "renamecolumn ::= nm",
 /* 101 */ "addcolumnlist ::= addcolumn",
 /* 102 */ "addcolumnlist ::= addcolumnlist COMMA addcolumn",
 /* 103 */ "addcolumn ::= ADD nm typetoken carglist",
 /* 104 */ "addcolumn ::= ADD COLUMNKW nm typetoken carglist",
 /* 105 */ "cmd ::= PRAGMA nm DOT nm DOT nm EQ nm",
 /* 106 */ "cmd ::= PRAGMA nm DOT nm DOT nm EQ plus_num",
 /* 107 */ "cmd ::= PRAGMA nm DOT nm DOT nm EQ minus_num",
 /* 108 */ "cmd ::= hint_opt select",
 /* 109 */ "select ::= oneselect",
 /* 110 */ "select ::= select multiselect_op oneselect",
 /* 111 */ "multiselect_op ::= UNION",
 /* 112 */ "multiselect_op ::= UNION ALL",
 /* 113 */ "multiselect_op ::= EXCEPT",
 /* 114 */ "multiselect_op ::= INTERSECT",
 /* 115 */ "oneselect ::= SELECT hint_opt distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt",
 /* 116 */ "select ::= valuelist",
 /* 117 */ "valuelist ::= VALUES LP nexprlist RP",
 /* 118 */ "valuelist ::= valuelist COMMA LP exprlist RP",
 /* 119 */ "hint_opt ::= HINT_START hintlist HINT_END",
 /* 120 */ "hint_opt ::=",
 /* 121 */ "hintlist ::= hintlist1",
 /* 122 */ "hintlist ::=",
 /* 123 */ "hintlist1 ::= hintlist1 onehint",
 /* 124 */ "hintlist1 ::= onehint",
 /* 125 */ "onehint ::= ID LP hintexprlist RP",
 /* 126 */ "hintexprlist ::= hintexprlist1",
 /* 127 */ "hintexprlist ::=",
 /* 128 */ "hintexprlist1 ::= hintexprlist1 hintexpr",
 /* 129 */ "hintexprlist1 ::= hintexpr",
 /* 130 */ "hintexpr ::= term",
 /* 131 */ "hintexpr ::= MINUS INTEGER",
 /* 132 */ "hintexpr ::= MINUS FLOAT",
 /* 133 */ "hintexpr ::= LP hintexprlist1 RP",
 /* 134 */ "hintexpr ::= ID",
 /* 135 */ "hintexpr ::= nm DOT nm",
 /* 136 */ "hintexpr ::= nm DOT nm DOT nm",
 /* 137 */ "distinct ::= DISTINCT",
 /* 138 */ "distinct ::= ALL",
 /* 139 */ "distinct ::=",
 /* 140 */ "sclp ::= selcollist COMMA",
 /* 141 */ "sclp ::=",
 /* 142 */ "selcollist ::= sclp expr as",
 /* 143 */ "selcollist ::= sclp STAR",
 /* 144 */ "selcollist ::= sclp nm DOT STAR",
 /* 145 */ "as ::= AS nm",
 /* 146 */ "as ::= ID",
 /* 147 */ "as ::=",
 /* 148 */ "from ::=",
 /* 149 */ "from ::= FROM seltabtree",
 /* 150 */ "stl_prefix ::= seltabtree joinop",
 /* 151 */ "stl_prefix ::=",
 /* 152 */ "seltabtree ::= stl_prefix nm dbnm as on_opt using_opt",
 /* 153 */ "seltabtree ::= stl_prefix nm dbnm LP exprlist RP as on_opt using_opt",
 /* 154 */ "seltabtree ::= stl_prefix LP select RP as on_opt using_opt",
 /* 155 */ "seltabtree ::= stl_prefix LP seltabtree RP as on_opt using_opt",
 /* 156 */ "dbnm ::=",
 /* 157 */ "dbnm ::= DOT nm",
 /* 158 */ "fullname ::= nm dbnm",
 /* 159 */ "joinop ::= COMMA|JOIN",
 /* 160 */ "joinop ::= INNER JOIN",
 /* 161 */ "joinop ::= CROSS JOIN",
 /* 162 */ "joinop ::= LEFT JOIN",
 /* 163 */ "joinop ::= LEFT OUTER JOIN",
 /* 164 */ "joinop ::= RIGHT JOIN",
 /* 165 */ "joinop ::= RIGHT OUTER JOIN",
 /* 166 */ "joinop ::= FULL JOIN",
 /* 167 */ "joinop ::= FULL OUTER JOIN",
 /* 168 */ "joinop ::= NATURAL JOIN",
 /* 169 */ "joinop ::= NATURAL INNER JOIN",
 /* 170 */ "joinop ::= NATURAL CROSS JOIN",
 /* 171 */ "joinop ::= NATURAL LEFT JOIN",
 /* 172 */ "joinop ::= NATURAL LEFT OUTER JOIN",
 /* 173 */ "joinop ::= NATURAL RIGHT JOIN",
 /* 174 */ "joinop ::= NATURAL RIGHT OUTER JOIN",
 /* 175 */ "joinop ::= NATURAL FULL JOIN",
 /* 176 */ "joinop ::= NATURAL FULL OUTER JOIN",
 /* 177 */ "on_opt ::= ON expr",
 /* 178 */ "on_opt ::=",
 /* 179 */ "using_opt ::= USING LP idlist RP",
 /* 180 */ "using_opt ::=",
 /* 181 */ "orderby_opt ::=",
 /* 182 */ "orderby_opt ::= ORDER BY sortlist",
 /* 183 */ "sortlist ::= sortlist COMMA expr sortascending",
 /* 184 */ "sortlist ::= expr sortascending",
 /* 185 */ "groupby_opt ::=",
 /* 186 */ "groupby_opt ::= GROUP BY nexprlist",
 /* 187 */ "having_opt ::=",
 /* 188 */ "having_opt ::= HAVING expr",
 /* 189 */ "limit_opt ::=",
 /* 190 */ "limit_opt ::= LIMIT expr",
 /* 191 */ "limit_opt ::= LIMIT expr OFFSET expr",
 /* 192 */ "limit_opt ::= LIMIT expr COMMA expr",
 /* 193 */ "where_opt ::=",
 /* 194 */ "where_opt ::= WHERE expr",
 /* 195 */ "cmd ::= hint_opt DELETE hint_opt FROM fullname as where_opt",
 /* 196 */ "cmd ::= hint_opt UPDATE hint_opt orconf fullname as SET setlist where_opt",
 /* 197 */ "setlist ::= setlist COMMA nm EQ expr",
 /* 198 */ "setlist ::= nm EQ expr",
 /* 199 */ "cmd ::= hint_opt insert_cmd hint_opt INTO fullname inscollist_opt select",
 /* 200 */ "insert_cmd ::= INSERT orconf",
 /* 201 */ "insert_cmd ::= REPLACE",
 /* 202 */ "inscollist_opt ::=",
 /* 203 */ "inscollist_opt ::= LP idlist RP",
 /* 204 */ "idlist ::= idlist COMMA nm",
 /* 205 */ "idlist ::= nm",
 /* 206 */ "expr ::= term",
 /* 207 */ "expr ::= LP expr RP",
 /* 208 */ "term ::= NULL",
 /* 209 */ "expr ::= ID",
 /* 210 */ "expr ::= nm DOT nm",
 /* 211 */ "expr ::= nm DOT nm DOT nm",
 /* 212 */ "term ::= INTEGER",
 /* 213 */ "term ::= FLOAT",
 /* 214 */ "term ::= TRUE",
 /* 215 */ "term ::= FALSE",
 /* 216 */ "term ::= BLOB",
 /* 217 */ "term ::= STRING",
 /* 218 */ "expr ::= VARIABLE",
 /* 219 */ "expr ::= CAST LP expr AS typetoken RP",
 /* 220 */ "expr ::= EXTRACT LP field COMMA exprlist RP",
 /* 221 */ "expr ::= TIMESTAMPADD LP field COMMA exprlist RP",
 /* 222 */ "expr ::= TIMESTAMPDIFF LP field COMMA exprlist RP",
 /* 223 */ "expr ::= TIMESTAMP_TRUNC LP field COMMA exprlist RP",
 /* 224 */ "field ::= YEAR|MONTH|DAY|HOUR|MINUTE|SECOND|MILLISECOND|DAY_OF_WEEK|DAY_OF_YEAR",
 /* 225 */ "expr ::= ID LP distinct exprlist RP window_opt",
 /* 226 */ "expr ::= ID LP STAR RP window_opt",
 /* 227 */ "window_opt ::=",
 /* 228 */ "window_opt ::= OVER LP partitionby_opt orderby_opt RP",
 /* 229 */ "partitionby_opt ::=",
 /* 230 */ "partitionby_opt ::= PARTITION BY nexprlist",
 /* 231 */ "expr ::= expr AND expr",
 /* 232 */ "expr ::= expr OR expr",
 /* 233 */ "expr ::= expr LT expr",
 /* 234 */ "expr ::= expr GT expr",
 /* 235 */ "expr ::= expr GE expr",
 /* 236 */ "expr ::= expr LE expr",
 /* 237 */ "expr ::= expr EQ expr",
 /* 238 */ "expr ::= expr NE expr",
 /* 239 */ "expr ::= expr BITAND expr",
 /* 240 */ "expr ::= expr BITOR expr",
 /* 241 */ "expr ::= expr LSHIFT expr",
 /* 242 */ "expr ::= expr RSHIFT expr",
 /* 243 */ "expr ::= expr PLUS expr",
 /* 244 */ "expr ::= expr MINUS expr",
 /* 245 */ "expr ::= expr STAR expr",
 /* 246 */ "expr ::= expr SLASH expr",
 /* 247 */ "expr ::= expr REM expr",
 /* 248 */ "expr ::= expr CONCAT expr",
 /* 249 */ "likeop ::= LIKE_KW|MATCH",
 /* 250 */ "likeop ::= NOT LIKE_KW|MATCH",
 /* 251 */ "expr ::= expr likeop expr",
 /* 252 */ "expr ::= expr likeop expr ESCAPE expr",
 /* 253 */ "expr ::= expr ISNULL",
 /* 254 */ "expr ::= expr NOTNULL",
 /* 255 */ "expr ::= expr NOT NULL",
 /* 256 */ "expr ::= expr IS expr",
 /* 257 */ "expr ::= expr IS NOT expr",
 /* 258 */ "expr ::= NOT expr",
 /* 259 */ "expr ::= BITNOT expr",
 /* 260 */ "expr ::= MINUS expr",
 /* 261 */ "expr ::= PLUS expr",
 /* 262 */ "between_op ::= BETWEEN",
 /* 263 */ "between_op ::= NOT BETWEEN",
 /* 264 */ "expr ::= expr between_op expr AND expr",
 /* 265 */ "in_op ::= IN",
 /* 266 */ "in_op ::= NOT IN",
 /* 267 */ "expr ::= expr in_op LP exprlist RP",
 /* 268 */ "expr ::= LP select RP",
 /* 269 */ "expr ::= expr in_op LP select RP",
 /* 270 */ "expr ::= EXISTS LP select RP",
 /* 271 */ "expr ::= CASE case_operand case_exprlist case_else END",
 /* 272 */ "case_exprlist ::= case_exprlist WHEN expr THEN expr",
 /* 273 */ "case_exprlist ::= WHEN expr THEN expr",
 /* 274 */ "case_else ::= ELSE expr",
 /* 275 */ "case_else ::=",
 /* 276 */ "case_operand ::= expr",
 /* 277 */ "case_operand ::=",
 /* 278 */ "exprlist ::= nexprlist",
 /* 279 */ "exprlist ::=",
 /* 280 */ "nexprlist ::= nexprlist COMMA expr",
 /* 281 */ "nexprlist ::= expr",
	};
#endif /* NDEBUG */

	const struct SQLParser::RULEINFO SQLParser::yyRuleInfo[] = {
  { 178, 1 },
  { 179, 2 },
  { 179, 1 },
  { 180, 1 },
  { 180, 3 },
  { 181, 0 },
  { 181, 1 },
  { 181, 2 },
  { 182, 1 },
  { 183, 2 },
  { 184, 0 },
  { 184, 1 },
  { 183, 2 },
  { 183, 2 },
  { 183, 2 },
  { 183, 1 },
  { 185, 12 },
  { 186, 1 },
  { 187, 0 },
  { 187, 3 },
  { 190, 1 },
  { 190, 3 },
  { 195, 3 },
  { 197, 0 },
  { 197, 3 },
  { 197, 3 },
  { 197, 2 },
  { 197, 6 },
  { 194, 0 },
  { 194, 6 },
  { 194, 5 },
  { 194, 11 },
  { 200, 4 },
  { 200, 6 },
  { 192, 0 },
  { 192, 2 },
  { 199, 1 },
  { 199, 3 },
  { 193, 0 },
  { 193, 4 },
  { 202, 5 },
  { 202, 3 },
  { 183, 1 },
  { 203, 14 },
  { 204, 2 },
  { 204, 1 },
  { 205, 2 },
  { 188, 1 },
  { 196, 1 },
  { 196, 4 },
  { 196, 5 },
  { 196, 6 },
  { 196, 7 },
  { 206, 1 },
  { 206, 2 },
  { 207, 1 },
  { 207, 1 },
  { 191, 0 },
  { 191, 2 },
  { 208, 1 },
  { 209, 5 },
  { 211, 0 },
  { 211, 2 },
  { 212, 1 },
  { 212, 1 },
  { 183, 4 },
  { 213, 2 },
  { 213, 0 },
  { 183, 1 },
  { 215, 7 },
  { 216, 0 },
  { 216, 1 },
  { 183, 4 },
  { 183, 3 },
  { 183, 3 },
  { 183, 6 },
  { 183, 3 },
  { 183, 6 },
  { 183, 4 },
  { 183, 3 },
  { 183, 3 },
  { 183, 3 },
  { 183, 6 },
  { 183, 6 },
  { 183, 6 },
  { 183, 6 },
  { 183, 11 },
  { 218, 0 },
  { 218, 5 },
  { 210, 4 },
  { 210, 2 },
  { 221, 1 },
  { 221, 1 },
  { 221, 0 },
  { 183, 7 },
  { 183, 7 },
  { 183, 4 },
  { 183, 9 },
  { 183, 4 },
  { 183, 8 },
  { 223, 1 },
  { 222, 1 },
  { 222, 3 },
  { 224, 4 },
  { 224, 5 },
  { 183, 8 },
  { 183, 8 },
  { 183, 8 },
  { 183, 2 },
  { 217, 1 },
  { 217, 3 },
  { 228, 1 },
  { 228, 2 },
  { 228, 1 },
  { 228, 1 },
  { 227, 10 },
  { 217, 1 },
  { 237, 4 },
  { 237, 5 },
  { 225, 3 },
  { 225, 0 },
  { 239, 1 },
  { 239, 0 },
  { 240, 2 },
  { 240, 1 },
  { 241, 4 },
  { 242, 1 },
  { 242, 0 },
  { 243, 2 },
  { 243, 1 },
  { 244, 1 },
  { 244, 2 },
  { 244, 2 },
  { 244, 3 },
  { 244, 1 },
  { 244, 3 },
  { 244, 5 },
  { 229, 1 },
  { 229, 1 },
  { 229, 0 },
  { 246, 2 },
  { 246, 0 },
  { 230, 3 },
  { 230, 2 },
  { 230, 4 },
  { 247, 2 },
  { 247, 1 },
  { 247, 0 },
  { 231, 0 },
  { 231, 2 },
  { 249, 2 },
  { 249, 0 },
  { 248, 6 },
  { 248, 9 },
  { 248, 7 },
  { 248, 7 },
  { 189, 0 },
  { 189, 2 },
  { 214, 2 },
  { 250, 1 },
  { 250, 2 },
  { 250, 2 },
  { 250, 2 },
  { 250, 3 },
  { 250, 2 },
  { 250, 3 },
  { 250, 2 },
  { 250, 3 },
  { 250, 2 },
  { 250, 3 },
  { 250, 3 },
  { 250, 3 },
  { 250, 4 },
  { 250, 3 },
  { 250, 4 },
  { 250, 3 },
  { 250, 4 },
  { 251, 2 },
  { 251, 0 },
  { 252, 4 },
  { 252, 0 },
  { 235, 0 },
  { 235, 3 },
  { 254, 4 },
  { 254, 2 },
  { 233, 0 },
  { 233, 3 },
  { 234, 0 },
  { 234, 2 },
  { 236, 0 },
  { 236, 2 },
  { 236, 4 },
  { 236, 4 },
  { 232, 0 },
  { 232, 2 },
  { 183, 7 },
  { 183, 9 },
  { 255, 5 },
  { 255, 3 },
  { 183, 7 },
  { 256, 2 },
  { 256, 1 },
  { 257, 0 },
  { 257, 3 },
  { 253, 3 },
  { 253, 1 },
  { 198, 1 },
  { 198, 3 },
  { 245, 1 },
  { 198, 1 },
  { 198, 3 },
  { 198, 5 },
  { 245, 1 },
  { 245, 1 },
  { 245, 1 },
  { 245, 1 },
  { 245, 1 },
  { 245, 1 },
  { 198, 1 },
  { 198, 6 },
  { 198, 6 },
  { 198, 6 },
  { 198, 6 },
  { 198, 6 },
  { 201, 1 },
  { 198, 6 },
  { 198, 5 },
  { 258, 0 },
  { 258, 5 },
  { 259, 0 },
  { 259, 3 },
  { 198, 3 },
  { 198, 3 },
  { 198, 3 },
  { 198, 3 },
  { 198, 3 },
  { 198, 3 },
  { 198, 3 },
  { 198, 3 },
  { 198, 3 },
  { 198, 3 },
  { 198, 3 },
  { 198, 3 },
  { 198, 3 },
  { 198, 3 },
  { 198, 3 },
  { 198, 3 },
  { 198, 3 },
  { 198, 3 },
  { 260, 1 },
  { 260, 2 },
  { 198, 3 },
  { 198, 5 },
  { 198, 2 },
  { 198, 2 },
  { 198, 3 },
  { 198, 3 },
  { 198, 4 },
  { 198, 2 },
  { 198, 2 },
  { 198, 2 },
  { 198, 2 },
  { 261, 1 },
  { 261, 2 },
  { 198, 5 },
  { 262, 1 },
  { 262, 2 },
  { 198, 5 },
  { 198, 3 },
  { 198, 5 },
  { 198, 4 },
  { 198, 5 },
  { 264, 5 },
  { 264, 4 },
  { 265, 2 },
  { 265, 0 },
  { 263, 1 },
  { 263, 0 },
  { 219, 1 },
  { 219, 0 },
  { 238, 3 },
  { 238, 1 },
	};




	/* APPENDIX */
} 
